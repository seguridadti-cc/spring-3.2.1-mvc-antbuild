<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
     General purpose build script for web applications and web services,
     including enhanced support for deploying directly to a Tomcat 6
     based server.

     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web application.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.
-->


<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="springapp" default="usage" basedir=".">

	<!-- ===================== Property Definitions =========================== -->


	<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

	<property file="build.properties"/>
	<property file="${user.home}/build.properties"/>


	<!-- ==================== File and Directory Names ======================== -->


	<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.path             Context path to which this application should be
                       deployed (defaults to "/" plus the value of the
                       "app.name" property).

  app.version          Version number of this iteration of the application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  appserver.home        The directory in which you have installed
                       a binary distribution of Tomcat 6.  This will
                       be used by the "deploy" target.

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

  manager.password     The login password of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

  manager.url          The URL of the "/manager" web application on the
                       Tomcat installation to which we will deploy web
                       applications and web services.

  manager.username     The login username of a user that is assigned the
                       "manager" role (so that he or she can execute
                       commands via the "/manager" web application)

-->

	<property name="app.name"      		value="springapp"/>
	<property name="app.path"      		value="/${app.name}"/>
	<property name="app.version"   		value="0.1-dev"/>
	<property name="build.home"    		value="${basedir}/webapp"/>
	<property name="dist.home"     		value="${basedir}/dist"/>
	<property name="docs.home"     		value="${basedir}/docs"/>
	<property name="src.dir"      		value="${basedir}/src/"/>
	<property name="src.main"      		value="${basedir}/src/main"/>
        <property name="dependencies"       value="${basedir}/lib"/>
        <!-- ServiciosWebX project location -->
        <property name="servicioswebx.home" value="${basedir}/../ServiciosWebX"/>
        <property name="servicioswebx.jar" value="${servicioswebx.home}/dist/ServiciosWebX.jar"/>
	<property name="resources.dir" 		value="${src.dir}/resources"/>
	<property name="jsp.dir" 			value="${src.dir}/jsp"/>
	<property name="config.dir" 		value="${src.dir}/config"/>
	<property name="war.dir" 			value="${basedir}/war"/>
	<property name="test.dir" 			value="${src.dir}/test/"/>
	<property name="test.resources" 	value="${test.dir}/resources"/>
	<property name="testbuild.dir" 		value="${test.dir}/classes"/>

	

	<!-- ==================== External Dependencies =========================== -->


	<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 6
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

	<!-- Dummy external dependency -->
	<!--
  <property name="foo.jar"
           value="/path/to/foo.jar"/>
-->


	<!-- ==================== Compilation Classpath =========================== -->

	<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.compileTests

-->

	<path id="compile.classpath">

		<!-- Include all JAR files that will be included in /WEB-INF/lib -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<!--
    <pathelement location="${foo.jar}"/>
-->
                <fileset dir="${dependencies}">
                        <include name="*.jar"/>
                </fileset>
                <pathelement location="${servicioswebx.jar}"/>

		<!-- Include all elements that Tomcat exposes to applications -->
		<fileset dir="${appserver.home}/bin">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${appserver.home}/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="${build.dir}"/>
	</path>


        <path id="test.classpath">

		<!-- Include all JAR files that will be included in /WEB-INF/lib -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<!--
    <pathelement location="${foo.jar}"/>
-->
                <fileset dir="${dependencies}">
                        <include name="*.jar"/>
                </fileset>
                <pathelement location="${servicioswebx.jar}"/>

		<!-- Include all elements that TcompileTestsomcat exposes to applications -->
		<fileset dir="${appserver.home}/bin">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${appserver.home}/lib">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="${testbuild.dir}"/>
	</path>
	<!-- ================== Custom Ant Task Definitions ======================= -->


	<!--

  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web application installed with Tomcat 6.  Before they
  can be successfully utilized, you must perform the following steps:

  - Copy the file "lib/catalina-ant.jar" from your Tomcat 6
    installation into the "lib" directory of your Ant installation.

  - Create a "build.properties" file in your application's top-level
    source directory (or your user login home directory) that defines
    appropriate values for the "manager.password", "manager.url", and
    "manager.username" properties described above.

  For more information about the Manager web application, and the functionality
  of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.

-->

	<taskdef resource="org/apache/catalina/ant/catalina.tasks"
           classpathref="compile.classpath"/>


	<!--  ==================== Compilation Control Options ==================== -->

	<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="true"/>
	<property name="compile.optimize"    value="true"/>



	<!-- ==================== All Target ====================================== -->

	<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

	<target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>



	<!-- ==================== Clean Target ==================================== -->

	<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

	<target name="clean"
		description="Delete old build and dist directories">
		<delete dir="${build.home}"/>
		<delete dir="${dist.home}"/>
		<delete dir="${war.dir}"/>
	</target>

	<!-- ==================== Compile Target ================================== -->

	<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

        <target name="resolve">
                <exec executable="gradle" dir="..">
                        <arg value="copyDependencies"/>
                </exec>
        </target>

        <target name="buildServiciosWebX">
                <ant dir="${servicioswebx.home}" target="jar"/>
        </target>

        <target name="compile" depends="clean, resolve, buildServiciosWebX, prepare"
                description="Compile Java sources">

		<!-- Compile Java classes as necessary -->
                <javac srcdir="${src.main}"
                destdir="${build.home}/WEB-INF/classes"
                source="17" target="17"
            debug="${compile.debug}"
                deprecation="${compile.deprecation}"
                optimize="${compile.optimize}">
			<classpath refid="compile.classpath"/>
		</javac>
		<war destfile="${war.dir}/${app.name}.war"
         webxml="${build.home}/WEB-INF/web.xml">
			<fileset dir="${build.home}" />
		</war>
	</target>

	<!-- ==================== Test Targets ===================================== -->
	<target name="compileTests" 
   		description="Compile Java sources for testing">

		<delete dir="${testbuild.dir}"/>
		<mkdir dir="${testbuild.dir}"/>
		<copy  todir="${testbuild.dir}">
                        <fileset dir="${resources.dir}">
                                <include name="*.properties"/>
                                <exclude name="log4j2.properties"/>
                        </fileset>
                </copy>
                <copy file="${test.resources}/log4j2.properties" todir="${testbuild.dir}"/>
		<copy file="${config.dir}/test-context.xml" todir="${testbuild.dir}"/>
                <javac destdir="${testbuild.dir}" source="17" target="17" debug="true"
            deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="test.classpath"/>
		</javac>
	</target>
	
	<target name="test" depends="compileTests" description="Compile test tree java files, deletes all all test compilation first.">
		<junit printsummary="on"
            fork="false"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">
			<classpath refid="test.classpath"/>
			<formatter type="brief" usefile="false"/>

			<batchtest>
				<fileset dir="${testbuild.dir}">
					<include name="**/*Tests.*"/>
					<exclude name="**/Jdbc*Tests.*" />
				</fileset>
			</batchtest>

		</junit>

		<fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
            ***********************************************************
        </fail>
	</target>

	<target name="testJDBC" depends="compileTests, setupTestDB" description="Compile DB test tree java files, deletes all all test compilation first.">
		<junit printsummary="on"
            fork="false"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">
			<classpath refid="test.classpath"/>
			<formatter type="brief" usefile="false"/>

			<batchtest>
				<fileset dir="${testbuild.dir}">
					<include name="**/Jdbc*Tests.*" />
				</fileset>
			</batchtest>

		</junit>

		<fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
            ***********************************************************
        </fail>
	</target>
	<!-- ==================== Dist Target ===================================== -->


	<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

	<target name="dist" depends="compile,javadoc"
   description="Create binary distribution">

		<!-- Copy documentation subdirectories -->
		<mkdir   dir="${dist.home}/docs"/>
		<copy    todir="${dist.home}/docs">
			<fileset dir="${docs.home}"/>
		</copy>

		<copy todir="${dist.home}" preservelastmodified="true">
			<fileset dir="${war.dir}">
				<include name="*.war"/>
			</fileset>
		</copy>
	</target>



	<!-- ==================== Deploy Target ================================== -->

	<!--

  The "deploy" target tells the specified Tomcat 6 installation to dynamically
  install this web application and make it available for execution.
-->

	<target name="deploy" depends="compile" description="Deploy application as a WAR file">
		<copy todir="${deploy.path}" preservelastmodified="true">
			<fileset dir="${war.dir}">
				<include name="*.war"/>
			</fileset>
		</copy>
	</target>


	<!-- ==================== Javadoc Target ================================== -->

	<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

	<target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

		<mkdir          dir="${dist.home}/docs/api"/>
		<javadoc sourcepath="${src.main}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
			<classpath refid="compile.classpath"/>
		</javadoc>

	</target>



	<!-- ====================== List Target =================================== -->

	<!--

  The "list" target asks the specified Tomcat 6 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->

	<target name="list"
   description="List installed applications on servlet container">

		<list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

	</target>


	<!-- ==================== Prepare Target ================================== -->

	<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<mkdir  dir="${build.home}"/>
		<mkdir  dir="${build.home}/WEB-INF"/>
		<mkdir  dir="${build.home}/WEB-INF/classes"/>
		<mkdir  dir="${build.home}/WEB-INF/jsp"/>
		<mkdir  dir="${build.home}/WEB-INF/lib"/>
		<mkdir  dir="${build.home}/WEB-INF/logs"/>
		<mkdir  dir="${war.dir}" />

		<!-- Copy static files as needed -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<copy  todir="${build.home}/WEB-INF/jsp">
			<fileset dir="${jsp.dir}/">
				<include name="*.jsp"/>
			</fileset>
		</copy>
		<copy  todir="${build.home}/WEB-INF/classes">
			<fileset dir="${resources.dir}/">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy  todir="${build.home}/WEB-INF">
			<fileset dir="${config.dir}/">
				<include name="*.*"/>
			</fileset>
		</copy>

		<!-- Copy external dependencies as required -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
                <copy  todir="${build.home}/WEB-INF/lib">
                        <fileset dir="${dependencies}/">
                                <include name="*.jar"/>
                        </fileset>
                </copy>
                <copy file="${servicioswebx.jar}" todir="${build.home}/WEB-INF/lib"/>
        </target>


	<!-- ==================== Reload Target =================================== -->

	<!--

  The "reload" signals the specified application Tomcat 6 to shut itself down
  and reload. This can be useful when the web application context is not
  reloadable and you have updated classes or property files in the
  /WEB-INF/classes directory or when you have added or updated jar files in the
  /WEB-INF/lib directory.

  NOTE: The /WEB-INF/web.xml web application configuration file is not reread
  on a reload. If you have made changes to your web.xml file you must stop
  then start the web application. 

-->

	<target name="reload" depends="compile"
   description="Reload application on servlet container">

		<reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

	</target>


	<!-- ==================== Remove Target =================================== -->

	<!--

  The "remove" target tells the specified Tomcat 6 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

	<target name="undeploy"
   description="Remove application on servlet container">

		<undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}"/>

	</target>

	<target name="start" description="Start Tomcat application">
		<start url="${manager.url}"
                 username="${manager.username}"
                 password="${manager.password}"
                 path="${app.path}"/>
	</target>

	<target name="stop" description="Stop Tomcat application">
		<stop url="${manager.url}"
                 username="${manager.username}"
                 password="${manager.password}"
                 path="${app.path}"/>
	</target>

	<target name="restart" description="Restart Tomcat application">
		<stop url="${manager.url}"
                 username="${manager.username}"
                 password="${manager.password}"
                 path="${app.path}"/>
		<start url="${manager.url}"
                 username="${manager.username}"
                 password="${manager.password}"
                 path="${app.path}"/>
	</target>

	<!-- ==================== HSQL DB =================================== -->
	<target name="createTestTables" depends="compileTests">
		<echo message="CREATE TABLES USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue"
             src="db/create_products.sql">
			<classpath refid="test.classpath"/>
		</sql>
	</target>

	<target name="dropTestTables"  depends="compileTests">
		<echo message="DROP TABLES USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue">
			<classpath refid="test.classpath"/>

        DROP TABLE products;

        </sql>
	</target>

	<target name="loadTestData"  depends="compileTests">
		<echo message="LOAD DATA USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue"
             src="db/load_data.sql">
			<classpath refid="test.classpath"/>
		</sql>
	</target>

	<target name="printTestData"  depends="compileTests">
		<echo message="PRINT DATA USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue"
             print="true">
			<classpath refid="test.classpath"/>

        SELECT * FROM products;

        </sql>
	</target>

	<target name="clearTestData"  depends="compileTests">
		<echo message="CLEAR DATA USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue">
			<classpath refid="test.classpath"/>

        DELETE FROM products;

        </sql>
	</target>

	<target name="shutdownTestDb"  depends="compileTests">
		<echo message="SHUT DOWN DATABASE USING: ${db.driver} ${db.url}"/>
		<sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pw}"
             onerror="continue">
			<classpath refid="test.classpath"/>

        SHUTDOWN;

        </sql>
	</target>

	<target name="setupTestDB"  depends="dropTestTables, createTestTables, loadTestData, printTestData ">
		<echo message="TEST DB SET UP: ${db.driver} ${db.url}"/>
	</target>
	
	<target name="usage">
		<echo message=""/>
		<echo message="${app.name} build file"/>
		<echo message="-----------------------------------"/>
		<echo message=""/>
		<echo message="Available targets are:"/>
		<echo message=""/>
		<echo message="all 			--> The 'all' target is a shortcut for running 'clean/compile' target"/>
		<echo message="clean 		--> The 'clean' removes all generated content."/>
		<echo message="prepare 		--> Generates the directory structure for a deployment."/>
		<echo message="compile 		--> transforms source files into object files in the appropriate location in the build directory, and generates a war file"/>
		<echo message="dist 		--> creates a binary distribution"/>
		<echo message="deploy 		--> Deploy application as a WAR file"/>
		<echo message="reload    	--> Reload application in Tomcat"/>
		<echo message="undeploy    	--> Undeploy application in Tomcat"/>
		<echo message="start     	--> Start Tomcat application"/>
		<echo message="stop      	--> Stop Tomcat application"/>
		<echo message="restart      --> Restart Tomcat application"/>
		<echo message="test      	--> Run all unit tests except JDBC tests"/>
		<echo message="testJDBC      --> Run all JDBC unit tests"/>
		<echo message="createTestTables     --> Creates test db tables"/>
		<echo message="dropTestTables      	--> Drops test db tables"/>
		<echo message="loadTestData      	--> Loads test data into tables"/>
		<echo message="printTestData      	--> prints data from test tables"/>
		<echo message="clearTestData      	--> Clears data from test tables"/>
		<echo message="shutdownTestDb      	--> Shuts down the test db"/>
		<echo message="setupTestDb      	--> Recreates the testDB with data."/>
		<echo message=""/>
	</target>	
</project>
